//@version=5

// "Made"* by thatRacer [Update 11/22] 
// Scripts Converted to Version 5 by thatRacer
// Copyrights: Indicator name: 'Altered Carbon' Inspired from: Richard K. Morgan's book & Netflix show: 'Altered Carbon'. I do not own it, just a fan.
// Important: All the Scripts used in 'Altered Carbon' belong to their respective owners and I does not claim any right over them.

indicator("Altered Carbon V3", overlay=true)

// 1 Supertrend //
atrPeriod = input(10, "ATR Length", group='Supertrend')
factor = input.float(3.0, "Factor", step = 0.01, group='Supertrend')

[supertrend, direction] = ta.supertrend(factor, atrPeriod)

bodyMiddle = plot((open + close) / 2, display=display.none)
upTrend = plot(direction < 0 ? supertrend : na, "Up Trend", color = color.aqua, style=plot.style_linebr)
downTrend = plot(direction < 0? na : supertrend, "Down Trend", color = color.red, style=plot.style_linebr)

// Remove "//" to see Supertrend background
//fill(bodyMiddle, upTrend, color.new(color.aqua, 90), fillgaps=false)
//fill(bodyMiddle, downTrend, color.new(color.red, 90), fillgaps=false)


// 2 Bollinger Bands //
// Bollinger Bands: © OG Credit: Created by: @NicTheMajestic [Nic]
// inputs
length = input.int(20, minval=1, group='Bollinger Bands')
src = input(close, title='Source', group='Bollinger Bands')
mult2 = input.float(2.0, minval=0.001, maxval=50, title='StdDev', group='Bollinger Bands')

//bands
basis = ta.sma(src, length)
dev = mult2 * ta.stdev(src, length)
upper = basis + dev
lower = basis - dev
offset1 = input.int(0, 'Offset', minval=-500, maxval=500, group='Bollinger Bands')
plot(basis, 'BB Basis', color=color.new(#f7525f, 0), offset=offset1)

// squeeze
keltPrd = length
keltFactor = 1.5
cciPeriod = 50
BandsDeviations = mult2
BandsPeriod = length
d = ta.cci(close, cciPeriod)
diff = ta.atr(keltPrd) * keltFactor
std = ta.stdev(close, BandsPeriod)
bbs = BandsDeviations * std / diff
res = bbs < 1 and d > 0
res2 = bbs < 1 and d <= 0

// extreme
bbr = (src - lower) / (upper - lower)
bbr_signal = bbr > .8

// computed signal
rideUp = bbr > 1
rideDown = bbr < 0
squeezed = res or res2

// render
col = squeezed ? color.yellow : rideUp ? color.red : rideDown ? color.aqua : color.blue
transparency = squeezed ? 85 : rideUp ? 85 : rideDown ? 85 : 100
p1 = plot(upper, 'BB Upper', color=col, offset=offset1)
p2 = plot(lower, 'BB Lower', color=col, offset=offset1)
fill(p1, p2, title='Background', color=color.new(col, transparency))

//OG
//p1 = plot(upper, 'Upper', color=col, offset=offset1)
//p2 = plot(lower, 'Lower', color=col, offset=offset1)
//fill(p1, p2, title='Background', color=col, transp=90)



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



// 3 Demark Reversal Points // [R] [R] [TD9]
// OG Credit: Copyright (c) 2019-present, Franklin Moormann (cheatcountry)
// Demark Reversal Points [CC] script may be freely distributed under the MIT license.
// indicator('Demark Reversal Points [CC]', max_bars_back=3000, overlay=true)

inp = input(title='Source', defval=close, group='Demark Reversal Points // [R] [R]')
res1 = input.timeframe(title='Resolution', defval='', group='Demark Reversal Points // [R] [R]')
rep = input(title='Allow Repainting?', defval=false, group='Demark Reversal Points // [R] [R]')
//bar = input(title='Allow Bar Color Change?', defval=true)
src2 = request.security(syminfo.tickerid, res1, inp[rep ? 0 : barstate.isrealtime ? 1 : 0])[rep ? 0 : barstate.isrealtime ? 0 : 1]
length2 = input.int(title='Length', defval=9, minval=1, group='Demark Reversal Points // [R] [R]')
lbLength = input.int(title='LbLength', defval=4, minval=1, group='Demark Reversal Points // [R] [R]')

uCount = 0
dCount = 0
for i = 0 to length2 - 1 by 1
    uCount += (nz(src2[i]) > nz(src2[i + lbLength]) ? 1 : 0)
    dCount += (nz(src2[i]) < nz(src2[i + lbLength]) ? 1 : 0)
    dCount

drp = dCount == length2 ? 1 : uCount == length2 ? -1 : 0

sig = drp > 0 or uCount > dCount ? 1 : drp < 0 or dCount > uCount ? -1 : 0
drpColor = sig > 0 ? color.green : sig < 0 ? color.red : color.black
alertcondition(ta.crossover(drp, 0), 'Buy Signal', 'Bullish Change Detected')
alertcondition(ta.crossunder(drp, 0), 'Sell Signal', 'Bearish Change Detected')
//barcolor(bar ? drpColor : na)
plotshape(ta.crossover(drp, 0), 'Buy [R]', shape.circle, location.belowbar, color.new(color.aqua, 0), text='R', textcolor=color.new(color.aqua, 0))
plotshape(ta.crossunder(drp, 0), 'Sell [R]', shape.circle, location.abovebar, color.new(color.red, 0), text='R', textcolor=color.new(color.red, 0))



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



// 4 Candlestick Reversal System // [B] [T]
// OG Credit: © LonesomeTheBlue
// indicator('Candlestick Reversal System', overlay=true)
pivotlbar = input(defval=5, title='Length to Highest/Lowest', group='Candlestick Reversal System [B] [T]')
highleftempty = ta.pivothigh(pivotlbar, 0)
lowleftempty = ta.pivotlow(pivotlbar, 0)
showma = input.bool(defval=false, title='SMA', inline='ma', group='Candlestick Reversal System [B] [T]')
malen = input.int(defval=10, title='', inline='ma', group='Candlestick Reversal System [B] [T]')
macol = input.color(defval=color.blue, title='', inline='ma', group='Candlestick Reversal System [B] [T]')

plot(showma ? ta.sma(close, malen) : na, color=showma ? macol : na, linewidth=1)

// Wick Reversal System
l01 = input(true, title='Enable Wick Reversal System', group='Candlestick Reversal System [B] [T]')
wick_multiplier = input.float(title='Wick Multiplier', defval=2.5, step=0.5, maxval=20, group='Candlestick Reversal System [B] [T]')
body_percentage = input.float(title='Body Percentage', defval=0.25, step=0.1, maxval=1, group='Candlestick Reversal System [B] [T]')

O = open
C = close
H = high
L = low

Wlongsignal = C > O and O - L >= (C - O) * wick_multiplier and H - C <= (H - L) * body_percentage or C < O and C - L >= (O - C) * wick_multiplier and H - C <= (H - L) * body_percentage or C == O and C != H and H - L >= (H - C) * wick_multiplier and H - C <= (H - L) * body_percentage or O == H and C == H and H - L >= ta.sma(H - L, 50)

Wshortsignal = C < O and H - O >= (O - C) * wick_multiplier and C - L <= (H - L) * body_percentage or C > O and H - C >= (C - O) * wick_multiplier and C - L <= (H - L) * body_percentage or C == O and C != L and H - L >= (C - L) * wick_multiplier and C - L <= (H - L) * body_percentage or O == L and C == L and H - L >= ta.sma(H - L, 50)

// Exteme Reversal System
l02 = input(true, title='Enable Exteme Reversal System', group='Candlestick Reversal System [B] [T]')
bodysize = input.float(title='Body Size', defval=0.525, step=0.05, maxval=1, group='Candlestick Reversal System [B] [T]')
barsback = input.int(title='Bars Back', defval=50, maxval=50, group='Candlestick Reversal System [B] [T]')
bodymultiplier = input.float(title='Body Multiplier', defval=2, step=0.25, maxval=5, group='Candlestick Reversal System [B] [T]')

mybodysize = math.abs(C - O)
AverageBody = ta.sma(mybodysize, barsback)
mycandlesize = H - L
AverageCandle = ta.sma(mycandlesize, barsback)

Elongsignal = O[1] - C[1] >= bodysize * (H[1] - L[1]) and H[1] - L[1] > AverageCandle * bodymultiplier and O[1] - C[1] > AverageBody and C > O
Eshortsignal = C[1] - O[1] >= bodysize * (H[1] - L[1]) and H[1] - L[1] > AverageCandle * bodymultiplier and C[1] - O[1] > AverageBody and O > C

// outside Reversal System
l03 = input(true, title='Enable Outside Reversal System', group='Candlestick Reversal System [B] [T]')

BarMultiplier = input.float(title='Body Multiplier', defval=1.25, step=0.05, maxval=3.5, group='Candlestick Reversal System [B] [T]')
BarsBack = input.int(title='Bars Back', defval=50, maxval=250, group='Candlestick Reversal System [B] [T]')
AverageCandle1 = ta.sma(mycandlesize, BarsBack)

Olongsignal = L < L[1] and C > H[1] and H - L >= AverageCandle1 * BarMultiplier
Oshortsignal = H > H[1] and C < L[1] and H - L >= AverageCandle1 * BarMultiplier

// Doji Reversal System
l04 = input(true, title='Enable Doji Reversal System', group='Candlestick Reversal System [B] [T]')

percentage = input.float(title='Body Percentage', defval=0.10, step=0.1, minval=0.1, group='Candlestick Reversal System [B] [T]')

frangehl = H[1] - L[1]
frangeco = math.abs(C[1] - O[1])
sma10 = ta.sma(close, 10)

Dshortsignal = frangeco <= frangehl * percentage and C < L[1] and L[1] > sma10 and C < O or C < L[2] and C[1] >= L[2] and frangeco <= frangeco * percentage and C < O and L[2] > sma10
Dlongsignal = frangeco <= frangehl * percentage and C > H[1] and H[1] < sma10 and C > O or C > H[2] and C[1] <= H[2] and frangeco <= frangeco * percentage and C > O and H[2] < sma10

longsignal = lowleftempty and (l01 and Wlongsignal or l02 and Elongsignal or l03 and Olongsignal or l04 and Dlongsignal)
shortsignal = highleftempty and (l01 and Wlongsignal or l02 and Eshortsignal or l03 and Oshortsignal or l04 and Dshortsignal)

plotshape(longsignal, 'Bottom [B]', color=color.new(color.blue, 0), location=location.belowbar, style=shape.triangleup, text='B', size=size.tiny)
plotshape(shortsignal, 'Top [T]', color=color.new(color.red, 0), location=location.abovebar, style=shape.triangledown, text='T', size=size.tiny, textcolor=color.new(color.red, 0))

alertcondition(longsignal, title='Long Signal', message='Long Signal')
alertcondition(shortsignal, title='Short Signal', message='Short Signal')



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



// 5 Reversal Finder [triangleup] [xcross] [cross] [X] [+]
// Reversal Finder: © OG Credit: Created by: NS91 2020
// Inputs
lookback = input(20, 'Lookback period for highs and lows', group='Reversal Finder [triangleup] [X] [+]')
malen2 = input(20, 'SMA length for candles range', group='Reversal Finder [triangleup] [X] [+]')
avrange = ta.sma(high - low, malen2)
mult = input(1.5, 'Range multiple', group='Reversal Finder [triangleup] [X] [+]')
rangethreshold = input.int(50, 'Range threshold (% of candle range)', maxval=99, group='Reversal Finder [triangleup] [X] [+]') / 100

// Signal conditions
longsig = high - low >= avrange * mult and low < ta.lowest(low[1], lookback) and close >= high - (high - low) * rangethreshold
shortsig = high - low >= avrange * mult and high > ta.highest(high[1], lookback) and close <= low + (high - low) * rangethreshold

// Plots for signal occurrences
plotshape(longsig, title='Long signal', style=shape.triangleup, color=color.new(#00bcd4, 0), location=location.belowbar, size=size.tiny)
plotshape(shortsig, title='Short signal', style=shape.cross, color=color.new(#f23645, 0), location=location.abovebar, size=size.tiny)
plotshape(longsig and close > open, title='Long signal with up candle', style=shape.triangleup, color=color.new(#22ab94, 0), location=location.belowbar, size=size.tiny)
plotshape(shortsig and close < open, title='Short signal with down candle', style=shape.xcross, color=color.new(#f7525f, 0), location=location.abovebar, size=size.tiny)

// Alert conditions
alertcondition(longsig, title='Long signal', message='Reversal finder long signal')
alertcondition(shortsig, title='Short signal', message='Reversal finder short signal')
alertcondition(longsig and close > open, title='Long signal with up candle', message='Reversal finder long signal with up candle')
alertcondition(shortsig and close < open, title='Short signal with down candle', message='Reversal finder short signal with down candle')
alertcondition(longsig or shortsig, title='Long or short signal', message='Reversal finder signal')



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



// 6 Reversal Candles // [BUY] [SELL]
// Reversal Candles: © OG Credit: Created by: Nico Muselle
ReversalLong = low[0] < low[1] and high[0] > high[1] and close[0] > low[0] + (high[0] - low[0]) / 2 and low[0] < low[2] and low[0] < low[3] and low[0] < low[4] and low[0] < low[5] and low[0] < low[6] and low[0] < low[7]
ReversalShort = low[0] < low[1] and high[0] > high[1] and close[0] < high[0] - (high[0] - low[0]) / 2 and high[0] > high[2] and high[0] > high[3] and high[0] > high[4] and high[0] > high[5] and high[0] > high[6] and high[0] > high[7]

// Bar Colors and signals
plotshape(ReversalLong, title='ReversalLong [BUY]', location=location.belowbar, color=color.new(#2962ff, 0), style=shape.triangleup, text='BUY')
plotshape(ReversalShort, title='ReversalShort [SELL]', location=location.abovebar, color=color.new(#f23645, 0), style=shape.triangledown, text='SELL', textcolor=color.new(#f23645, 0))

//alert
alertcondition(ReversalLong, title='ReversalLong [BUY]', message='ReversalLong [BUY]')
alertcondition(ReversalShort, title='ReversalShort [SELL]', message='ReversalShort [SELL]')



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



// 7 TD9 //
// Converted to Version 5 by thatRacer
// Credit: OG version 1 Code: TD Sequential by glaz 
//indicator('TD Sequential', overlay=true)
//transp1=input(0, group='TD Sequential')
Numbers=input(true, group='TD Sequential')
SR=input(true, group='TD Sequential')
Barcolor=input(true, group='TD Sequential')

TD = 0.0
TD := close > close[4] ? nz(TD[1]) + 1 : 0
TS = 0.0
TS := close < close[4] ? nz(TS[1]) + 1 : 0

TDUp = 0.0
TDDn = 0.0
TDUp := TD - ta.valuewhen(TD < TD[1], TD, 1)
TDDn := TS - ta.valuewhen(TS < TS[1], TS, 1)

//hide TD2 to TD7
//showTD27  = input.bool(defval=false, title='Show TD2-7?')
//Replace Numbers to showTDx
showTD1  = input(false, title='Show TD1', group='TD Sequential')

plotshape(showTD1 ? TDUp == 1 ? true : na : na, title='TDUp1', style=shape.triangledown, text='1', textcolor=color.new(color.red, 50), location=location.abovebar, color=color.new(color.red, 50))
//plotshape(Numbers ? TDUp == 2 ? true : na : na, title='TDUp2', style=shape.triangledown, text='2', textcolor=color.new(color.red, 0), location=location.abovebar, color=color.new(color.white, 0))
//plotshape(Numbers ? TDUp == 3 ? true : na : na, title='TDUp3', style=shape.triangledown, text='3', textcolor=color.new(color.white, 0), location=location.abovebar, color=color.new(color.white, 0))
//plotshape(Numbers ? TDUp == 4 ? true : na : na, title='TDUp4', style=shape.triangledown, text='4', textcolor=color.new(color.white, 0), location=location.abovebar, color=color.new(color.white, 0))
//plotshape(Numbers ? TDUp == 5 ? true : na : na, title='TDUp5', style=shape.triangledown, text='5', textcolor=color.new(color.white, 0), location=location.abovebar, color=color.new(color.white, 0))
//plotshape(Numbers ? TDUp == 6 ? true : na : na, title='TDUp6', style=shape.triangledown, text='6', textcolor=color.new(color.white, 0), location=location.abovebar, color=color.new(color.white, 0))
//plotshape(Numbers ? TDUp == 7 ? true : na : na, title='TDUp7', style=shape.triangledown, text='7', textcolor=color.new(color.white, 0), location=location.abovebar, color=color.new(color.white, 0))
plotshape(Numbers ? TDUp == 8 ? true : na : na, title='TDUp8', style=shape.triangledown, text='8', textcolor=color.new(color.red, 0), location=location.abovebar, color=color.new(color.red, 0))
plotshape(Numbers ? TDUp == 9 ? true : na : na, title='TDUp9', style=shape.triangledown, text='9', textcolor=color.new(color.red, 0), location=location.abovebar, color=color.new(color.red, 0))

plotshape(showTD1 ? TDDn == 1 ? true : na : na, title='TDDn1', style=shape.triangleup, text='1', textcolor=color.new(color.aqua, 50), location=location.belowbar, color=color.new(color.aqua, 50))
//plotshape(Numbers ? TDDn == 2 ? true : na : na, title='TDDn2', style=shape.triangleup, text='2', textcolor=color.new(color.white, 0), location=location.belowbar, color=color.new(color.white, 0))
//plotshape(Numbers ? TDDn == 3 ? true : na : na, title='TDDn3', style=shape.triangleup, text='3', textcolor=color.new(color.white, 0), location=location.belowbar, color=color.new(color.white, 0))
//plotshape(Numbers ? TDDn == 4 ? true : na : na, title='TDDn4', style=shape.triangleup, text='4', textcolor=color.new(color.white, 0), location=location.belowbar, color=color.new(color.white, 0))
//plotshape(Numbers ? TDDn == 5 ? true : na : na, title='TDDn5', style=shape.triangleup, text='5', textcolor=color.new(color.white, 0), location=location.belowbar, color=color.new(color.white, 0))
//plotshape(Numbers ? TDDn == 6 ? true : na : na, title='TDDn6', style=shape.triangleup, text='6', textcolor=color.new(color.white, 0), location=location.belowbar, color=color.new(color.white, 0))
//plotshape(Numbers ? TDDn == 7 ? true : na : na, title='TDDn7', style=shape.triangleup, text='7', textcolor=color.new(color.white, 0), location=location.belowbar, color=color.new(color.white, 0))
plotshape(Numbers ? TDDn == 8 ? true : na : na, title='TDDn8', style=shape.triangleup, text='8', textcolor=color.new(color.aqua, 0), location=location.belowbar, color=color.new(color.aqua, 0))
plotshape(Numbers ? TDDn == 9 ? true : na : na, title='TDDn9', style=shape.triangleup, text='9', textcolor=color.new(color.aqua, 0), location=location.belowbar, color=color.new(color.aqua, 0))

// S/R Code By johan.gradin
// Sell Setup
priceflip = ta.barssince(close < close[4])
sellsetup = close > close[4] and priceflip
sell = sellsetup and ta.barssince(priceflip != 9)
sellovershoot = sellsetup and ta.barssince(priceflip != 13)
sellovershoot1 = sellsetup and ta.barssince(priceflip != 14)
sellovershoot2 = sellsetup and ta.barssince(priceflip != 15)
sellovershoot3 = sellsetup and ta.barssince(priceflip != 16)

// Buy setup
priceflip1 = ta.barssince(close > close[4])
buysetup = close < close[4] and priceflip1
buy = buysetup and ta.barssince(priceflip1 != 9)
buyovershoot = ta.barssince(priceflip1 != 13) and buysetup
buyovershoot1 = ta.barssince(priceflip1 != 14) and buysetup
buyovershoot2 = ta.barssince(priceflip1 != 15) and buysetup
buyovershoot3 = ta.barssince(priceflip1 != 16) and buysetup

// TD lines
TDbuyh = ta.valuewhen(buy, high, 0)
TDbuyl = ta.valuewhen(buy, low, 0)
TDsellh = ta.valuewhen(sell, high, 0)
TDselll = ta.valuewhen(sell, low, 0)

// Plots
plot(SR ? TDbuyh ? TDbuyl : na : na, title='TD9 Plot', style=plot.style_circles, linewidth=1, color=color.new(color.red, 0))
plot(SR ? TDselll ? TDsellh : na : na, title='TD9 Plot', style=plot.style_circles, linewidth=1, color=color.new(color.aqua, 0))
barcolor(Barcolor ? sell ? #ffffff : buy ? #ffffff : sellovershoot ? #ffffff : sellovershoot1 ? #ffffff : sellovershoot2 ? #ffffff : sellovershoot3 ? #ffffff : buyovershoot ? #ffffff : buyovershoot1 ? #ffffff : buyovershoot2 ? #ffffff : buyovershoot3 ? #ffffff : na : na, title='TD9 bar colors')



// Copyrights: Indicator name: 'Altered Carbon' Inspired from: Richard K. Morgan's book & Netflix show: 'Altered Carbon'. I do not own it, just a fan.
// Important: All the Scripts/name used in 'Altered Carbon' belong to their respective owners and I does not claim any right over them.
// Thank you, Racer.
